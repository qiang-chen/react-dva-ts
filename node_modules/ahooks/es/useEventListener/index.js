import { useEffect, useRef } from 'react';
import { getTargetElement } from '../utils/dom';

function useEventListener(eventName, handler, options) {
  var savedHandler = useRef();
  useEffect(function () {
    savedHandler.current = handler;
  }, [handler]);
  useEffect(function () {
    var targetElement = getTargetElement(options === null || options === void 0 ? void 0 : options.target, window);
    var isSupported = targetElement.addEventListener;
    if (!isSupported) return;

    var eventListener = function eventListener(event) {
      return savedHandler.current && savedHandler.current(event);
    };

    targetElement.addEventListener(eventName, eventListener, {
      capture: options === null || options === void 0 ? void 0 : options.capture,
      once: options === null || options === void 0 ? void 0 : options.once,
      passive: options === null || options === void 0 ? void 0 : options.passive
    });
    return function () {
      targetElement.removeEventListener(eventName, eventListener, {
        capture: options === null || options === void 0 ? void 0 : options.capture
      });
    };
  }, [eventName, options]);
}

export default useEventListener;