/* eslint no-empty: 0 */
var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

import { useLayoutEffect, useRef } from 'react';
import screenfull from 'screenfull';
import useBoolean from '../useBoolean';
import { getTargetElement } from '../utils/dom';
export default (function (target, options) {
  var _a = options || {},
      onExitFull = _a.onExitFull,
      onFull = _a.onFull;

  var onExitFullRef = useRef(onExitFull);
  onExitFullRef.current = onExitFull;
  var onFullRef = useRef(onFull);
  onFullRef.current = onFull;

  var _b = __read(useBoolean(false), 2),
      state = _b[0],
      _c = _b[1],
      toggle = _c.toggle,
      setTrue = _c.setTrue,
      setFalse = _c.setFalse;

  useLayoutEffect(function () {
    /* 非全屏时，不需要监听任何全屏事件 */
    if (!state) {
      return;
    }

    var el = getTargetElement(target);

    if (!el) {
      return;
    }
    /* 监听退出 */


    var onChange = function onChange() {
      if (screenfull.isEnabled) {
        var isFullscreen = screenfull.isFullscreen;
        toggle(isFullscreen);
      }
    };

    if (screenfull.isEnabled) {
      try {
        screenfull.request(el);
        setTrue();

        if (onFullRef.current) {
          onFullRef.current();
        }
      } catch (error) {
        setFalse();

        if (onExitFullRef.current) {
          onExitFullRef.current();
        }
      }

      screenfull.on('change', onChange);
    }
    /* state 从 true 变为 false，则关闭全屏 */


    return function () {
      if (screenfull.isEnabled) {
        try {
          screenfull.off('change', onChange);
          screenfull.exit();
        } catch (error) {}
      }

      if (onExitFullRef.current) {
        onExitFullRef.current();
      }
    };
  }, [state, typeof target === 'function' ? undefined : target]);

  var toggleFull = function toggleFull() {
    return toggle();
  };

  return [!!state, {
    setFull: setTrue,
    exitFull: setFalse,
    toggleFull: toggleFull
  }];
});