var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

import { useMemo, useState, useCallback } from 'react';
import useUpdateEffect from '../useUpdateEffect';
export default function useControllableValue(props, options) {
  if (props === void 0) {
    props = {};
  }

  if (options === void 0) {
    options = {};
  }

  var defaultValue = options.defaultValue,
      _a = options.defaultValuePropName,
      defaultValuePropName = _a === void 0 ? 'defaultValue' : _a,
      _b = options.valuePropName,
      valuePropName = _b === void 0 ? 'value' : _b,
      _c = options.trigger,
      trigger = _c === void 0 ? 'onChange' : _c;
  var value = props[valuePropName];
  var initialValue = useMemo(function () {
    if (valuePropName in props) {
      return value;
    }

    if (defaultValuePropName in props) {
      return props[defaultValuePropName];
    }

    return defaultValue;
  }, []);

  var _d = __read(useState(initialValue), 2),
      state = _d[0],
      setState = _d[1];
  /* init 的时候不用执行了 */


  useUpdateEffect(function () {
    if (valuePropName in props) {
      setState(value);
    }
  }, [value]);
  var handleSetState = useCallback(function (v) {
    if (!(valuePropName in props)) {
      setState(v);
    }

    if (props[trigger]) {
      props[trigger](v);
    }
  }, [props, valuePropName, trigger]);
  return [state, handleSetState];
}