var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

import { useCallback, useState } from 'react';

var useSetState = function useSetState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _a = __read(useState(initialState), 2),
      state = _a[0],
      setState = _a[1];

  var setMergeState = useCallback(function (patch) {
    setState(function (prevState) {
      return Object.assign({}, prevState, patch instanceof Function ? patch(prevState) : patch);
    });
  }, [setState]);
  return [state, setMergeState];
};

export default useSetState;