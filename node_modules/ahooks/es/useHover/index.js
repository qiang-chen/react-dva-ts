var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

import { useEffect, useRef } from 'react';
import useBoolean from '../useBoolean';
import { getTargetElement } from '../utils/dom';
export default (function (target, options) {
  var _a = options || {},
      onEnter = _a.onEnter,
      onLeave = _a.onLeave;

  var onEnterRef = useRef(onEnter);
  onEnterRef.current = onEnter;
  var onLeaveRef = useRef(onLeave);
  onLeaveRef.current = onLeave;

  var _b = __read(useBoolean(false), 2),
      state = _b[0],
      _c = _b[1],
      setTrue = _c.setTrue,
      setFalse = _c.setFalse;

  useEffect(function () {
    var onMouseEnter = function onMouseEnter() {
      if (onEnterRef.current) onEnterRef.current();
      setTrue();
    };

    var onMouseLeave = function onMouseLeave() {
      if (onLeaveRef.current) onLeaveRef.current();
      setFalse();
    };

    var targetElement = getTargetElement(target); // 如果 传入dom

    if (targetElement) {
      targetElement.addEventListener('mouseenter', onMouseEnter);
      targetElement.addEventListener('mouseleave', onMouseLeave);
      return function () {
        targetElement.removeEventListener('mouseenter', onMouseEnter);
        targetElement.removeEventListener('mouseleave', onMouseLeave);
      };
    }
  }, [typeof target === 'function' ? undefined : target]);
  return state;
});