var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

var __spread = this && this.__spread || function () {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }

  return ar;
};

import { useState, useMemo, useCallback } from 'react';

function useSet(initialValue) {
  var initialSet = useMemo(function () {
    return initialValue === undefined ? new Set() : new Set(initialValue);
  }, [initialValue]);

  var _a = __read(useState(initialSet), 2),
      set = _a[0],
      setSet = _a[1];

  var stableActions = useMemo(function () {
    return {
      add: function add(key) {
        return setSet(function (prevSet) {
          return new Set(__spread(Array.from(prevSet), [key]));
        });
      },
      remove: function remove(key) {
        return setSet(function (prevSet) {
          return new Set(Array.from(prevSet).filter(function (i) {
            return i !== key;
          }));
        });
      },
      reset: function reset() {
        return setSet(initialSet);
      }
    };
  }, [setSet]);

  var utils = __assign({
    has: useCallback(function (key) {
      return set.has(key);
    }, [set])
  }, stableActions);

  return [set, utils];
}

export default useSet;